use tube::{Game, Solver};
fn main() {
	let game = Game::new(vec![
		[8, 8, 7, 3],
		[4, 3, 5, 0],
		[4, 5, 0, 4],
		[4, 7, 2, 0],
		[3, 6, 1, 2],
		[2, 8, 5, 1],
		[7, 6, 1, 2],
		[3, 6, 1, 6],
		[5, 7, 8, 0],
		[0; 4],
		[0; 4],
	]);
	let mut solver = Solver::new(game);
	solver.solve();
	// println!("{:?}", game);
}

#[cfg(test)]
mod test {
	use tube::{Game, Solver};
	// --- Solutions ---

	fn test_game(mut game: Game) {
		let solutions = Solver::new(game.clone()).get_solutions();
		let solution = solutions.first().unwrap();
		for (a, b) in solution {
			let i = game.tube(*a);
			let o = game.tube(*b);
			game.pour(i, o);
		}
		assert!(game.is_solved());
	}

	#[test]
	fn simple_game() {
		let mut solver = Solver::new(Game::new(vec![[1, 2, 1, 2], [2, 1, 2, 1], [0, 0, 0, 0]]));
		assert!(solver.get_solutions().contains(&vec![
			(1, 3),
			(2, 1),
			(2, 3),
			(1, 2),
			(1, 3),
			(2, 1),
			(2, 3)
		]));
	}
	#[test]
	fn game_2() {
		test_game(Game::new(vec![[1, 2, 1, 2], [2, 1, 2, 1], [0; 4]]));
	}
	#[test]
	fn game_3() {
		test_game(Game::new(vec![
			[1, 2, 3, 1],
			[1, 2, 3, 3],
			[2, 3, 1, 2],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_4() {
		test_game(Game::new(vec![
			[1, 1, 2, 3],
			[2, 3, 2, 3],
			[1, 2, 3, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_6() {
		test_game(Game::new(vec![
			[1, 1, 1, 2],
			[1, 3, 2, 4],
			[4, 2, 4, 3],
			[3, 4, 3, 5],
			[2, 5, 5, 5],
			[0; 4],
			[0; 4],
		]))
	}
	#[test]
	fn game_7() {
		test_game(Game::new(vec![
			[1, 2, 1, 3],
			[1, 2, 4, 4],
			[1, 4, 5, 5],
			[4, 2, 5, 3],
			[5, 3, 2, 3],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_9() {
		test_game(Game::new(vec![
			[1, 2, 3, 1],
			[4, 5, 5, 3],
			[1, 4, 4, 3],
			[2, 5, 3, 1],
			[2, 2, 4, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_10() {
		test_game(Game::new(vec![
			[1, 2, 1, 3],
			[4, 3, 5, 6],
			[2, 7, 7, 1],
			[2, 6, 6, 3],
			[4, 2, 5, 5],
			[7, 7, 4, 1],
			[5, 6, 3, 4],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_12() {
		test_game(Game::new(vec![
			[1, 1, 2, 3],
			[3, 2, 3, 4],
			[1, 5, 4, 3],
			[2, 5, 1, 4],
			[2, 5, 4, 5],
			[0; 4],
			[0; 4],
		]))
	}
	#[test]
	fn game_13() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 2, 2, 6],
			[1, 6, 7, 3],
			[5, 4, 1, 2],
			[5, 7, 3, 5],
			[7, 4, 6, 3],
			[6, 4, 1, 7],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_15() {
		test_game(Game::new(vec![
			[1, 2, 2, 3],
			[4, 5, 3, 4],
			[1, 4, 3, 4],
			[3, 1, 5, 5],
			[2, 5, 2, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_16() {
		test_game(Game::new(vec![
			[1, 2, 2, 1],
			[1, 3, 1, 4],
			[5, 5, 6, 5],
			[7, 6, 3, 7],
			[5, 7, 4, 6],
			[4, 2, 7, 4],
			[6, 3, 3, 2],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_18() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 1, 5, 3],
			[4, 1, 2, 3],
			[4, 2, 2, 5],
			[3, 1, 5, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_19() {
		test_game(Game::new(vec![
			[1, 1, 2, 3],
			[4, 1, 4, 3],
			[5, 5, 6, 7],
			[5, 3, 1, 6],
			[2, 4, 3, 7],
			[5, 4, 7, 7],
			[2, 2, 6, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_21() {
		test_game(Game::new(vec![
			[1, 2, 2, 3],
			[3, 2, 4, 5],
			[2, 4, 1, 1],
			[1, 5, 3, 4],
			[5, 4, 5, 3],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_22() {
		test_game(Game::new(vec![
			[1, 2, 3, 3],
			[4, 5, 6, 7],
			[2, 5, 1, 6],
			[4, 6, 2, 7],
			[4, 4, 5, 7],
			[3, 2, 3, 1],
			[5, 6, 7, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_24() {
		test_game(Game::new(vec![
			[1, 1, 1, 2],
			[3, 3, 4, 4],
			[3, 5, 2, 4],
			[5, 3, 4, 2],
			[1, 5, 2, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_25() {
		test_game(Game::new(vec![
			[1, 2, 3, 3],
			[1, 2, 4, 5],
			[3, 6, 4, 4],
			[7, 5, 5, 6],
			[7, 2, 7, 6],
			[4, 2, 1, 7],
			[6, 1, 5, 3],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_27() {
		test_game(Game::new(vec![
			[1, 2, 3, 3],
			[4, 5, 5, 2],
			[1, 1, 2, 3],
			[5, 4, 4, 1],
			[3, 5, 2, 4],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_28() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 6, 5, 5],
			[3, 7, 3, 4],
			[6, 5, 1, 7],
			[3, 2, 1, 1],
			[2, 4, 4, 6],
			[6, 7, 7, 2],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_30() {
		test_game(Game::new(vec![
			[1, 1, 1, 2],
			[3, 4, 5, 5],
			[1, 5, 6, 2],
			[3, 2, 7, 6],
			[7, 4, 7, 6],
			[4, 3, 4, 5],
			[3, 2, 6, 7],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_31() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 5, 1, 6],
			[7, 3, 8, 4],
			[6, 7, 7, 2],
			[2, 9, 9, 8],
			[3, 5, 7, 4],
			[6, 1, 9, 3],
			[5, 9, 5, 8],
			[1, 8, 6, 2],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_33() {
		test_game(Game::new(vec![
			[1, 2, 2, 1],
			[3, 4, 5, 6],
			[5, 3, 7, 7],
			[4, 6, 2, 6],
			[5, 6, 4, 2],
			[1, 7, 7, 3],
			[1, 4, 5, 3],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_34() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 5, 2, 6],
			[7, 6, 7, 6],
			[4, 8, 1, 4],
			[8, 3, 3, 8],
			[9, 6, 9, 2],
			[2, 9, 3, 5],
			[1, 8, 9, 5],
			[7, 4, 7, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_36() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 1, 3, 5],
			[6, 4, 1, 5],
			[6, 5, 3, 3],
			[6, 7, 4, 2],
			[4, 6, 7, 2],
			[2, 1, 7, 7],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_37() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[3, 3, 5, 4],
			[6, 7, 4, 8],
			[1, 5, 9, 9],
			[9, 7, 2, 1],
			[7, 8, 2, 7],
			[4, 9, 5, 6],
			[1, 8, 8, 6],
			[2, 5, 6, 3],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_39() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[2, 5, 6, 7],
			[6, 4, 4, 3],
			[7, 3, 6, 2],
			[6, 1, 4, 2],
			[7, 3, 1, 5],
			[5, 7, 5, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_40() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 6, 7, 1],
			[7, 8, 4, 3],
			[2, 6, 6, 3],
			[8, 3, 4, 8],
			[9, 8, 5, 9],
			[2, 5, 7, 6],
			[4, 9, 7, 2],
			[5, 1, 9, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_42() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 5, 6, 3],
			[4, 2, 7, 3],
			[2, 1, 7, 4],
			[6, 7, 7, 6],
			[3, 5, 1, 2],
			[5, 1, 6, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_43() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 6, 7, 8],
			[8, 2, 6, 1],
			[2, 3, 3, 5],
			[4, 7, 3, 4],
			[7, 7, 9, 8],
			[6, 9, 1, 5],
			[8, 1, 4, 9],
			[2, 5, 9, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_45() {
		test_game(Game::new(vec![
			[1, 2, 1, 3],
			[4, 5, 6, 7],
			[1, 2, 5, 4],
			[4, 3, 4, 7],
			[3, 7, 6, 6],
			[6, 2, 5, 5],
			[3, 7, 2, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_46() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 5, 6, 7],
			[6, 5, 7, 1],
			[8, 7, 4, 2],
			[9, 3, 2, 3],
			[3, 8, 6, 9],
			[9, 8, 6, 9],
			[7, 1, 4, 2],
			[5, 5, 1, 8],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_48() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 5, 2, 4],
			[4, 3, 1, 6],
			[5, 7, 7, 2],
			[1, 6, 3, 7],
			[1, 4, 6, 3],
			[7, 6, 2, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_49() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 5, 5, 5],
			[4, 6, 2, 5],
			[3, 6, 2, 6],
			[7, 7, 1, 3],
			[6, 8, 9, 9],
			[3, 4, 9, 7],
			[8, 1, 1, 9],
			[7, 2, 8, 8],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_51() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 1, 6, 3],
			[5, 3, 5, 6],
			[1, 7, 4, 2],
			[6, 2, 7, 2],
			[6, 4, 7, 7],
			[4, 1, 3, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_52() {
		test_game(Game::new(vec![
			[1, 2, 2, 3],
			[4, 5, 6, 6],
			[5, 5, 7, 8],
			[6, 8, 4, 3],
			[1, 9, 3, 4],
			[1, 8, 7, 1],
			[7, 7, 9, 3],
			[9, 6, 9, 4],
			[8, 2, 5, 2],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_54() {
		test_game(Game::new(vec![
			[1, 2, 1, 3],
			[4, 5, 2, 1],
			[2, 6, 6, 7],
			[7, 1, 3, 4],
			[6, 2, 7, 5],
			[4, 7, 3, 4],
			[6, 3, 5, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_55() {
		test_game(Game::new(vec![
			[1, 2, 1, 3],
			[2, 4, 2, 5],
			[6, 7, 8, 8],
			[7, 6, 3, 8],
			[5, 9, 1, 1],
			[3, 9, 6, 3],
			[5, 4, 2, 5],
			[6, 4, 9, 7],
			[4, 7, 8, 9],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_57() {
		test_game(Game::new(vec![
			[1, 2, 3, 1],
			[4, 5, 6, 3],
			[5, 7, 4, 4],
			[7, 3, 2, 7],
			[7, 5, 2, 2],
			[6, 6, 1, 5],
			[3, 6, 4, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_58() {
		test_game(Game::new(vec![
			[1, 2, 2, 3],
			[4, 1, 5, 6],
			[4, 6, 7, 8],
			[5, 6, 5, 7],
			[3, 9, 2, 8],
			[1, 3, 9, 8],
			[4, 4, 2, 9],
			[9, 5, 6, 1],
			[7, 7, 3, 8],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_60() {
		test_game(Game::new(vec![
			[1, 2, 3, 2],
			[1, 4, 1, 1],
			[5, 4, 3, 6],
			[2, 7, 6, 7],
			[2, 4, 6, 3],
			[7, 3, 5, 6],
			[7, 5, 5, 4],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_61() {
		test_game(Game::new(vec![
			[1, 2, 2, 3],
			[4, 5, 1, 6],
			[1, 2, 7, 3],
			[4, 2, 8, 5],
			[9, 3, 6, 6],
			[5, 9, 9, 4],
			[3, 1, 8, 8],
			[7, 4, 9, 8],
			[7, 5, 7, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_63() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 6, 2, 5],
			[4, 5, 7, 7],
			[6, 2, 6, 7],
			[1, 7, 5, 1],
			[6, 1, 4, 2],
			[4, 3, 3, 3],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_64() {
		test_game(Game::new(vec![
			[1, 1, 2, 2],
			[3, 4, 5, 6],
			[7, 3, 2, 5],
			[5, 3, 6, 4],
			[1, 6, 5, 8],
			[8, 6, 8, 9],
			[7, 7, 1, 9],
			[4, 8, 7, 9],
			[4, 2, 3, 9],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_66() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 2, 3, 4],
			[1, 3, 6, 7],
			[2, 5, 6, 4],
			[6, 7, 5, 2],
			[7, 7, 1, 3],
			[1, 5, 4, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_67() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 3, 6, 7],
			[4, 3, 2, 7],
			[8, 8, 1, 2],
			[9, 2, 6, 7],
			[5, 1, 6, 9],
			[1, 4, 9, 8],
			[6, 7, 3, 8],
			[4, 9, 5, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_69() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 3, 3, 2],
			[5, 6, 6, 1],
			[2, 7, 2, 5],
			[4, 5, 1, 6],
			[4, 4, 7, 7],
			[3, 6, 7, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_70() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 1, 5, 5],
			[6, 1, 2, 5],
			[1, 7, 7, 2],
			[8, 9, 9, 4],
			[9, 5, 7, 7],
			[3, 8, 4, 2],
			[8, 6, 6, 3],
			[3, 9, 8, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_72() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[2, 3, 5, 1],
			[6, 7, 1, 6],
			[7, 4, 5, 7],
			[6, 3, 4, 5],
			[1, 2, 2, 7],
			[3, 4, 6, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_73() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 6, 4, 7],
			[8, 7, 8, 5],
			[1, 8, 3, 3],
			[9, 5, 2, 4],
			[9, 7, 9, 2],
			[6, 5, 6, 7],
			[8, 3, 1, 9],
			[6, 4, 2, 1],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_75() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[5, 5, 6, 2],
			[3, 1, 7, 2],
			[6, 5, 5, 4],
			[1, 2, 4, 6],
			[7, 6, 1, 4],
			[7, 3, 3, 7],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_76() {
		test_game(Game::new(vec![
			[1, 2, 2, 3],
			[1, 4, 5, 5],
			[6, 1, 7, 8],
			[8, 1, 5, 2],
			[6, 3, 7, 8],
			[6, 7, 7, 4],
			[9, 3, 8, 4],
			[9, 3, 9, 9],
			[2, 4, 5, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_78() {
		test_game(Game::new(vec![
			[1, 2, 3, 4],
			[4, 2, 4, 5],
			[6, 6, 1, 3],
			[1, 5, 4, 5],
			[7, 3, 6, 7],
			[3, 7, 5, 1],
			[2, 6, 7, 2],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_79() {
		test_game(Game::new(vec![
			[1, 2, 3, 2],
			[1, 4, 5, 2],
			[6, 7, 4, 4],
			[8, 3, 6, 8],
			[1, 9, 3, 2],
			[9, 9, 8, 7],
			[7, 5, 8, 7],
			[5, 6, 3, 9],
			[4, 1, 6, 5],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_81() {
		test_game(Game::new(vec![
			[1, 2, 3, 3],
			[2, 4, 4, 1],
			[1, 3, 5, 5],
			[4, 6, 1, 4],
			[7, 5, 7, 7],
			[6, 2, 3, 7],
			[6, 2, 5, 6],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_82() {
		test_game(Game::new(vec![
			[1, 2, 2, 2],
			[3, 4, 5, 6],
			[7, 5, 8, 1],
			[7, 5, 5, 6],
			[6, 9, 8, 7],
			[9, 1, 9, 8],
			[7, 3, 4, 2],
			[4, 8, 6, 3],
			[3, 9, 1, 4],
			[0; 4],
			[0; 4],
		]));
	}
	#[test]
	fn game_1964() {
		test_game(Game::new(vec![
			[8, 8, 7, 3],
			[4, 3, 5, 0],
			[4, 5, 0, 4],
			[4, 7, 2, 0],
			[3, 6, 1, 2],
			[2, 8, 5, 1],
			[7, 6, 1, 2],
			[3, 6, 1, 6],
			[5, 7, 8, 0],
			[0; 4],
			[0; 4],
		]));
	}
}
